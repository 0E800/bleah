#!/usr/bin/env python
#coding:utf8
import argparse
import sys

from bleah.scan import *
from bleah.enumerate import *
from bleah.swag import *

def main():
    print_sexy_banner()

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--hci', action='store', type=int, default=0, help='HCI device index.')
    parser.add_argument('-t', '--timeout', action='store', type=int, default=5, help='Scan delay, 0 for continuous scanning.')
    parser.add_argument('-s', '--sensitivity', action='store', type=int, default=-128, help='dBm threshold.')
    parser.add_argument('-d', '--discover', action='store_true', help='Connect to available devices and perform service discovery.')
    parser.add_argument('-n', '--handles', action='store_true', help='Try to read every handle. ' + red("WARNING: For some devices this might cause the read operation to hang ¯\_(ツ)_/¯"))
    parser.add_argument('-f', '--force', action='store_true', help='Try to connect even if the device doesn\'t allow to.')
    parser.add_argument('-b', '--bssid', action='store', type=str, default='', help='Filter by device address.' )

    args = parser.parse_args(sys.argv[1:])

    devices = start_scan(args)

    if args.discover:
        for d in devices:
            if args.bssid != '' and d.addr != args.bssid:
                continue
            elif not d.connectable and args.force is False:
                continue

            warn = ""
            if not d.connectable:
                warn = yellow("(forcing connection, this could take a while) ")

            print "@ Connecting to %s %s..." % ( bold( d.addr ), warn ),
            sys.stdout.flush()

            try:
                dev = Peripheral(d)

                print green('connected.')
                print "@ Enumerating all the things ",
                enumerate_device_properties( dev, args )
                dev.disconnect()
                print
            except Exception as e:
                print "\n! %s" % red( str(e) ) 
                # just in case
                try:
                    dev.disconnect()
                except:
                    pass

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print "\n@ Quitting."
